version: '2.0'

services:

  basicstation:

    # Use pre-defined image
    image: xoseperez/basicstation:latest

    # Or comment out image and build it yourself
    #build:
    #  context: .
    #  args:
    #    ARCH: armv7hf

    container_name: basicstation
    restart: unless-stopped
    privileged: true
    network_mode: host      # required to read main interface MAC instead of virtual one,
                            # you don't need this if you set the GATEWAY_EUI manually

    #volumes:
    #  - ./config:/app/config

    environment:

      # To select your concentrator you have 3 options:
      # Option 1: set the model of the concentrator you are using (by RAK, SeeedStudio, IMST or MikroTik)
      # Option 2: set the Semtech's chip on it
      #MODEL: "RAK5146"
      #MODEL: "SX1303"
      MODEL: "SX1302"

      # The concentrator design is usually taken from the MODEL (see https://doc.sm.tc/station):
      # * V2 design was used with SX1301 and SX1308 concentrators with SPI interface
      # * PicoCell design defines SX1308-based concentrators with USB interface
      # * CoreCell design is in use with SX1302 and SX1303 concentrators, both SPI and USB interface
      # but in case you what to specify it you can using the DESIGN variable
      #DESIGN: "V2"
      #DESIGN: "PICOCELL"
      DESIGN: "CORECELL"

      # These are the defaults:
      #GW_RESET_GPIO: 17
      #GW_POWER_EN_GPIO: 0
      #GW_POWER_EN_LOGIC:1
      GW_RESET_GPIO: 7
      GW_POWER_EN_GPIO: 18
      GW_POWER_EN_LOGIC: 1


      # The interface the concentrator uses, defaults to "SPI"
      #INTERFACE: "USB"

      # If you have the concentrator connected to a different port
      # than the default one ("/dev/spidev0.0" for SPI or "/dev/ttyACM0" for USB)
      # you can define it this way:
      #DEVICE: "/dev/spidev0.1"
      #DEVICE: "/dev/ttyUSB0"
      DEVICE: "/dev/spidev0.0"

      # Problems with an SPI concentrator are sometimes related to the bus speed,
      # you can set a different one this way
      #SPI_SPEED: 8000000

      # The service will define the Gateway EUI based on a network interface: eth0, wlan0 or usb0.
      # If neither of these exist or you want it to use a different interface you can define the NIC this way:
      #GATEWAY_EUI_NIC: "enx00e04c68160f"

      # You can also set a custom Gateway EUI (8 bytes in hex format)
      GATEWAY_EUI: "B827EB2024FFFE3D"

      # The default LNS server is the European TTN server.
      # If you still want to use TTN but a different region you can set it this way,
      # this will create the TC_URI and CUPS_URI URLs for the corresponding TTN server
      TTN_REGION: "eu1"

      # Using LNS protocol: define a custom LNS server
      #TC_URI: "wss://lns.example.com:8887"

      # Using LNS protocol: if you use a server other than TTN, you will have to provide the certificate for that server.
      #TC_TRUST: "-----BEGIN CERTIFICATE----- MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA......"

      # Using LNS protocol: finally, you need to create a KEY for the gateway and provide it here:
      TC_KEY: "NNSXS.3JIQLGTS4OZ4WGDGNMOA4PQECNX5LUIPIFEZTYA.DET2HVJLK43RWUSZXJ5OLVVC5UCR3GYNCLHIXQPDNUYPVQH7XTEA"

      # Using CUPS protocol: define a custom CUPS server
      #CUPS_URI: "https://lns.example.com:443"

      # Using CUPS protocol: if you use a server other than TTN, you will have to provide the certificate for that server.
      #CUPS_TRUST: "-----BEGIN CERTIFICATE----- MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA......"

      # Using CUPS protocol: finally, you need to create a KEY for the service to connect to the CUPS server.
      #CUPS_KEY: "NNSXS.SLOC764GN3....."
